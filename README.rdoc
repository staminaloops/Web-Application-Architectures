== Web Application Architectures, University of New Mexico

Certificate:
https://www.coursera.org/maestro/api/certificate/get_certificate?course_id=974484

This repository is just the result of the Programming Assignments:

Web Application Architectures

Learn how to build and deploy modern web application architectures – applications that run over the Internet, in the "cloud," using a browser as the user interface.

<b>Instructor: Professor
Greg Heileman,
University of New Mexico</b>

This course explores the development of web application architectures from an engineering perspective.  We will consider the fundamental design patterns and philosophies associated with modern web application architectures, along with their major components.  By the end of this course, I expect you to be able to:

* <b>Design, develop and deploy a modern web application</b>.  This course is not about how to build a pretty web page, it's about how to build and deploy the full stack of protocols and technologies associated with a complete web app.  That said, it is not possible for you to become an expert in this area in a few weeks. My goal, rather, is to put you on the right path by providing a solid foundation and framework for understanding web applications, allowing you to dig deeper and learn more on your own. The next bullet points describe how we're going to do this.

* <b>Understand the major architectural components in web apps</b>, and how they fit together.  Modern web apps are complex.  A typical application has a database along with numerous scripts on one end of the web stack, a web server in the middle that delivers information over the Internet, and a user's browser on the other end of the web stack.  Even getting started in trying to understand these components can be overwhelming. Consider just the programming languages involved in a typical web stack: from the database (SQL), to the web server (scripting language), to the browser (JavaScript, HTML, CSS), we're dealing with five different programming languages, not to mention the protocols they're operating over – and you need to know a little about them too! We'll introduce a number of software design patterns throughout the course that are aimed at helping you to manage this complexity.

* <b>Use Ruby on Rails.</b>  We're going to learn about web apps through the Ruby on Rails framework.  Rails is a framework for creating web applications that is built on top of the Ruby programming language. I believe this is one of the best frameworks for learning about web applications, and it's also proving highly successful as a platform for commercial offerings.  That said, there are many other frameworks available, and the concepts you will learn using Rails are transferable to these other frameworks.

* <b>Better understand modern software engineering practice.</b>  We’ll be using the latest tools and practices in software development, source code control, testing, and application deployment. This will include exposure to agile development practices, the numerous tools that software engineers are expected to know how to use, and the cloud-based resources that are becoming increasingly important in web applications.      

== Course Syllabus

<b>Week One, March 16-21 — Module 1: Introduction and Background</B>

Lecture 1: Historical Perspective

Lecture 2: What is a Web Application?

Lecture 3: Web 1.0, 2.0, 3.0 Application Architectures

Lecture 4: Design Patterns

Lecture 5: Setting up Your Development Environment

Homework: Quiz 1, Lectures 1-2, due March 22.

Homework: Quiz 2, Lectures 3-4, due March 22.



<b>Week Two, March 22-28 — Module 2: Ruby on Rails</b>

Lecture 1: Rails Overview

Lecture 2: Your First Rails App

Lecture 3: The Blog App -- Iteration 1

Lecture 4: Rails Philosophy

Lecture 5: Version Control

Lecture 6: Git and Rails

Homework: Quiz 3, Lectures 1-2, due March 29.

Homework: Quiz 4, Lectures 3-4, due March 29.

Homework: Quiz 5, Lectures 5-6, due March 29.

Homework: Programming Assignment 1, March 29.



<b>Week Three, March 29-April 4 — Module 3: Database Interactions</b>

Lecture 1: Relational Databases

Lecture 2: Databases in Rails

Lecture 3: The Active Record Design Pattern

Lecture 4: The Blog App -- Iteration 2 (Associations)

Lecture 5: The Blog App -- Iteration 3 (Validations)

Homework: Quiz 6, Lectures 1-2, due April 5.

Homework: Quiz 7, Lectures 3-5, due April 5.

Homework: Programming Assignment 2, due April 5.



<b>Week Four, April 5-April 11 — Module 4: The Ruby Programming Language</b>

Lecture 1: Ruby Background

Lecture 2: Classes and Inheritance

Lecture 3: Objects and Variables

Lecture 4: Strings, Regular Expressions and Symbols

Lecture 5: Expressions and Control Structures

Lecture 6: Collections, Blocks and Iterators

Homework: Quiz 8, Lectures 1-2, due April 12.

Homework: Quiz 9, Lectures 3-4, due April 12.

Homework: Quiz 10, Lectures 5-6, due April 12.



<b>Week Five, April 12-18 — Module 5: Middleware</b>

Lecture 1: What is Middleware?

Lecture 2: The Hypertext Transfer Protocol (HTTP) -- Introduction

Lecture 3: HTTP -- Request

Lecture 4: HTTP -- Response

Lecture 5: The Model-View-Controller (MVC) Design Pattern

Lecture 6: Rails Controllers -- Request Handling

Lecture 7: Rails Controllers -- Response

Lecture 8: MVC Implementation in Rails

Lecture 9: The Blog App -- Iteration 4

Homework: Quiz 11, Lectures 1-3, due April 19.

Homework: Quiz 12, Lectures 4-6, due April 19.

Homework: Quiz 14, Lectures 7-8, due April 19.

Homework: Programming Assignment 3, due April 19.




<b>Week Six, April 19-26 — Module 6: Presentation/User Interface</b>

Lecture 1: Introduction and Background

Lecture 2: HTML — Basic Syntax

Lecture 3: HTML -- Document Structure

Lecture 4: HTML -- Forms

Lecture 5: Dynamic Content

Lecture 6: Cascading Style Sheets (CSS)

Lecture 7: JavaScript and jQuery

Lecture 8: Ajax

Lecture 9: The Blog App -- Iteration 5

Homework: Quiz 15, Lectures 1-2, due May 2.

Homework: Quiz 16, Lectures 3-4, due May 2.

Homework: Quiz 17, Lectures 5-6, due May 2.

Homework: Quiz 18, Lectures 7-8, due May 2.

Homework: Programming Assignment 4, due May 2.
